public class MyHandler extends TextWebSocketHandler {

  @Override
  public void handleTextMessage(WebSocketSession session, TextMessage message) {
  }
}

//
@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

  @Override
  public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
    registry.addHandler(new MyHandler(), "/myHandler");
  }

  @Bean
    public WebSocketHandler myHandler()
  return new MyHandler();
  }
}

//
@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

  @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry){
      registry.addHandler(new MyHandler(), "/myHandler");
      .addInterceptors(new HttpSessionHandshakeInterceptor());
    }
}

//
@Configuration
@EnableWebSocket
public class WebSocketConfig implements WebSocketConfigurer {

  @Bean
    public ServletServerContainerFactorycreateWebSocketContainer(){
      ServeltServerContainereFactoryBean container = new 
        ServletServerContainerFactoryBean();
      container.setMaxTextMessageBufferSize(8192);
      container.setMaxBinaryMessageBufferSize(8192);
      return container;
  }

  //
  @Configuration
  @EnableWebSocket
  public class WebSocketConfig implements WebSocketConfigurer {

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
      registry.addHandler(echoWebSocketHandler(),
          "/echo").setHandshakeHandler(handshakeHandler());
    }

    @Bean
    public DefaultHandshakeHandler handshakeHandler() {

      WebSocketPolicy policy = new WebSocketPolicy(WebSocketBehavior.SERVER);
      policy.setInputBufferSize(8192);
      policy.setIdleTimeout(600000);

      return new DefaultHandshakeHandler(
          new JettyRequestUpgradeStrategy(new WebSocketServerFactory(policy)));
    }
  }

  //
  @Configuration
  @EnableWebSocket
  public class WebSocketConfig implements WebSocketConfigurer {

    @Override
    public void registerWebSocketHandlers(WebSocketHandlerRegistry registry) {
      registry.addHandler(myHandler(),
          "/myHandler").setAllowedOrigins("http://mydomain.com");

    }

    @Bean
    public WebSocketHandler myHandler() {
      return new MyHandler();
    }
  }

  //
  @Configuration
  @EnableWebSocket
  public class WebSocketConfig implements WebSocketConfigurer {

    @Override
      public void registerWebSocketHandlers(WebSocketHandlerRegistry registry){
        registry.addHandler(myHandler(), "/myHandler"").withSockJS();
      }

    @Bean
    public WebSocketHandler myHandler() {
      return new MyHandler();
    }
  }

  //
  @Configuration
  @EnableWebSocketMessageBroker
  public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
      public void registerStompEndpoints(StomEndpointRegistry registry){
        registry.addEndpoint("/portfolio").withSockJS();
      .setClientLibraryUrl("http://localhost:8080/myapp/js/sockjs-client.js");
        
      }
  }

  //
  List<Transport> tranports = new ArrayList<>(
      2);transports.add(new WebSocketTransport(new StandardWebSocketClient()));transports.add(new RestTemplateTransport());

  SockJsClient sockJsClient = new SockJsClient(
      transports);sockJsClient.doHandshake(new MyWebSocketHandler(),"ws://example.com:8080/sockjs");
  HttpClient jettyHttpClient = new HttpClient();

  jettyHttpClient.setMaxConnectionsPerDestination(1000);jettyHttpClient.setExecutor(new QueuedThreadPool(1000));

  //
  @Configuration
  public class WebSocketConfig extends WebSocketMessageBrokerConfigurationSupport {

    @Override
    public void registryStopEndpoint(StomEndpointRegistry registry) {
      registry.addEndpoint("/sockjs").withSockJS()
          .setStreamByteLimit(512 * 1024)
          .setHttpMessageCacheSize(1000)
          .setDisconnectDelay(30 * 1000);
    }
  }

  //
  @Configuration
  @EnableWebSocketMessageBroker
  public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {

    @Override
    public void registryStompEndpoints(StompEndpointRegistry registry) {
      registry.addEndpoint("/portfolio").withSockJS();
    }

    @Override
    public void configureMessageBroker(MessageBrokerRegistry config) {
      config.setApplicationDestinationPrefixes("/app");
      config.enableSimpleBroker("/topic", "/queue");
    }
  }

  //
  var socket = new SockJS("/spring-websocket-portfolio/portfolio");
  var stompClient = webstomp.over(socket);

  stompClient.connect({},

  function(frame ){
  
}

//
var socket = new WebSocket("/spring-websocket-portfolio/portfolio");
var stompClient = Stomp.over(socket);

stompClient.connect({}, function(frame ){

}
//
@Configuration
  @EnableWebSocketMessageBroker
  public class WebSocketConfig implements WebSocketMessageBrokerConfigurer{

    @Override
    public void registryStompEndpoints(StompEndpointRegistry registry){
      registry.addEndpoint("/portfolio").setHandshakeHandler(handshakeHandler());
    }

    @Bean
    public DefaultHandshakeHandler handshakeHandler(){

      WebSocketPolicy policy = new WebSocketPolicy(WebSocketBehavior.SERVER);
      policy.setInputBufferSize(8192);
      policy.setIdleTimeout(600000);

      return new DefaultHandshakeHandler{
        new JettyRequestUpgradeStrategy(new WebSocketServerFactory(policy));
      }
    }
  //
    @Configuration
    @EnableWebSocketMessageBroker

    public class WebSocketConfig implements WebSocketMessageBrokerConfigurer{

      @Override
      public void registryStompEndpoints(StompEndpointRegistry registry){
        registry.addEndpoint("/portfolios");
      }

      @Override
      public void configureMessageBroker(MessageBrokerRegistry registry){
        registry.setApplicationDestinationPrefixes("/app");
        registry.enableSimpleBroker("/topic");
      }
    }

    @Controller
    public class GreetingController

      @MessageMapping("/greeting")
    public String handle(String greeting){
      return "[" +getTimestamp() + ": " + greeting;
    }
  }
//
@Autowired
  private TaskScheduler messageBrokerTaskScheduler;

stompClient.setTaskScheduler(this.messageBrokerTaskScheduler);

StompHeaders headers = new StompHeaders();
headers.setDestination("/topic/...");
headers.setReceipt("r1");
FrameHandler handler = ...;
stompSession.subscribe(headers, handler).addReceiptTask(receiptHeaders -> {
  
});
//
@Controller
  public class MyController
  {
    @MessageExceptionHandler
    public ApplicationError handleException(MyException exception){

      return appError;
    }
  }
//
@Controller
  public class GreetingController{

    private SimpleMessagingTemplate template;

    @Autowired
    public GreetingController(SimpMessagingTemplate template){
      this.template = template;
    }

    @RequestMapping(path="/greetings", method=POST)
    public void greet(String greeting){
      String text = "[" + getTimestamp() + "]: " + greeting;
      this.template.convertAndSend("/topic/greetings", text);
    }
  }
//
@Configuration
  @EnableWebSocketMessageBroker

public class WebSocketConfig implements WebSocketMessageBrokerConfigurer{

  private TaskScheduler messageBrokerTaskScheduler;

  @Autowired
  public void setMessageBrokerTaskScheduler(@Lazy TaskScheduler taskScheduler){
    this.messageBrokerTaskScheduler = taskScheduler;
  }

  @Override
  public void configureMessageBroker(MessageBrokerRegistry config){
    registry.enableSimpleBroker("/queue"/,"/topic/");
    .setHeartbeatValue(new long[]{10000,20000});
  .setTaskScheduler(this.messageBrokerTaskScheduler);
  }
}

//
@Configuration
  @EnableWebSocketMessageBroker
  public class WebSocketConfig implements WebSocketMessageBrokerConfigurer{

    @Override
    public void registryStompEndpoints(StompEndpointRegistry registry){
      registry.addEndpoint("/portfolio").withSockJS();
    }

    @Override
    public void configureMessageBroker(MessageBrokerRegistry registry){
      registry.enableStompBrokerRelay("/topic", '/quere');
      registry.setApplicationDestinationPrefixes("/app");
    }
  }
//
@Configuration
  @EnableWebSocketMessageBroker
  public class WebSocketConfig extends AbstractWebSocketMessageBrokersConfigurer{

    @Override
    public void configureMessageBroker(MessageBrokerRegistry registry){
      registry.enableStompBrokerRelay("/topic", "/queue").setTcpClient(createTcpClient());
      registry.setApplicationDestinationPrefixes("/app");
    }

    private ReactorNettyTcpClient<byte[]>createTcpClient(){
      return new ReactorNettyTcpClient<>(
        client -> client.addressSupplier(() -> ...),
        new StompReactorNettyCodec());
    }
  }
//
@Configuration
  @EnableWebSocketMessageBroker
  public class WebSocketConfig implements WebSocketMessageBrokerConfigurer{

    @Override
    public void configureMessageBroker(MessageBrokerRegistry registry){
      registry.setPathMatcher(new AntPathMatcher("."));
      registry.enableStompBrokerRelay("/queue","/topic");
      registry.setApplicationDestinationPrefixes("/app");
    
    }
  }
//
@Controller
  @MessageMapping("red")

  public class RedController{

    @MessageMapping("blue.{green}")
  public void handleGreen(@DestinationVariable String green){
  }
  }
//
@Cofiguration
  @EnableWebSocketMessageBroker
  public class MyConfig implements WebSocketMessageBrokerConfigurer{

    @Override
    public void configureClientInboundChannel(ChannelRegistration registration){
      registration.intercetors(new ChannelInterceptor(){
        @Override
        public Message<?> preSend(Message<?> message,MessageChannel channel){
          StompHeaderAccessor accessor =
            MessageHeaderAccessor.getAccessor(message,
                                             StompHeaderAccessor.class);
          if(StompCommand.CONNECT.equals(accessor.getCommand())){
            Authentication user = ...; 
            accessor.setUser(user);
          }
          return message;
        }
      });
    }
  }
///
@Controller
  public class PortfoliosController{

    @MessageMapping("/trade")
    @SendToUer("/queue/position-updates")
   public TradeResult executeTrade(Trade trade, Principal principal){

     return tradeResult;
   } 
  }
//
@Controller
  public class MyController{

    @MessageMapping("/action")
  public void handleAction()throws Exception{
    
  }

    @MessageExceptionHandler
    @SendToUser(destinations="/queue/erros", broadcast=false)
    public ApplicationError handleException(MyBusinessException exception){

      return appError;
    }
  
  }
//
@Service
  public class TradeServiceImpl implements TradeService{

    private final SimpleMessageingTemplate messagingTemplate;

    @Autowired
    public TradeServiceImpl(SimpleMessagingTemplate messageTemplate){
      this.messagingTemplate = messageTemplate;
    }

    public void afterTradeExecuted(Trade trade){
      this.messagingTemplate.convertAndSendToUser(
        trade.getUserName(), "/queue/position-updates", trade.getResult())"
      
    }
  }
//
@Configuration
  @EnableWebSocketMessageBroker
  public class MyConfig implements WebSocketMessageBrokerConfigurer{

    @Override
    protected void configureMessageBroker(MessageBrokerRegistry registry){

      registry.setPreservePublishOrder(true);
    }
  }
//
@Configuration
  @EnableWebSocketMessageBroker
  public class WebSocketConfig implements WebSocketMessageBrokerConfigurer{

    @Override
    public void configureClientInboundChannel(ChannelRegistration registration){
      registration.interceptors(new MyChannelInterceptor());
    }
  }
//
public class MyChannelInterceptor implements ChannelInterceptor{

  @Override
  public Message<?> preSend(Message<?> message, MessageChannel channel){
    StompHeaderAccessor accessor = StompHeaderAccessor.wrap(message);
    StompCommand command = accessor.getStompCommand();
  
  
  return message;
}
}

//

WebSocketClient webSocketClient = new StandardWebSocketClient();
WebSocketStompClient stompClient = new WebSocketStompClient(webSocketClient);
stompClient.setMessageConverter(new StringMessageConverter());
stompClient.setTaskScheduler(taskScheduler);

//
String url = "ws://localhost:8080/portfolio";
StompSessionHandler sessionHandler = new MyStompSessionHandler();
stompClient.connect(url, sessionHandler);
//
public clas MyStompSessionHandler implements StompSessionHandlerAdapter{


  @Override
    public void afterConnected(StompSession session, StompHeaders connectedHeaders)
}
}
//
//
session.send("/topic/something","payload");
//
session.subscribe("/topic/something", new StompFrameHandler(){

  @Override
  public Type getPayloadType(StompHeaders headers){
    return String.class;
  }

  @Override
  public void handleFrame(StompHeaders headers, Object payload){
    
  }
});//1089P
